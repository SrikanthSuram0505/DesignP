		      				JAVA Design Patterns

ADesign patterns are well-proved solution for solving the specific problem/task.

Problem Given:
Suppose you want to create a class for which only a single instance (or object) should be created and that single object can be used by all other classes.

Solution:
Singleton design pattern is the best solution of above specific problem. So, every design pattern has some specification or set of rules for solving the problems. What are those specifications, you will see later in the types of design patterns.

By using the design patterns you can make your code more flexible, reusable and maintainable. It is the most important part because java internally follows design patterns.

Advantage of design pattern:
1. They are reusable in multiple projects.
2. They provide the solutions that help to define the system architecture.
3. They capture the software engineering experiences.
4. They provide transparency to the design of an application.
5. They are well-proved and testified solutions since they have been built upon the knowledge and experience of expert software developers.
6. Design patterns don't guarantee an absolute solution to a problem. They provide clarity to the system architecture and the possibility of building a better system.

When should we use the design patterns?
We must use the design patterns during the analysis and requirement phase of SDLC(Software Development Life Cycle).
Design patterns ease the analysis and requirement phase of SDLC by providing information based on prior hands-on experiences.

Categorization of design patterns:

Basically, design patterns are categorized into two parts:
1. Core Java (or JSE) Design Patterns.
2. JEE Design Patterns.

	=======	Core Java (or JSE) Design Patterns. =======

1) Creational Pattern

	Factory Method Pattern
	Abstract Factory Pattern
	Singleton Pattern
	Prototype Pattern
	Builder Pattern
	Object Pool Pattern

2) Structural Pattern

	Adapter PatternBridge Pattern
	Composite PatternDecorator Pattern
	Facade PatternFlyweight Pattern
	proxy Pattern

3) Behavioral Pattern

	Chain of ResponsibilityCommand Pattern
	Interpreter PatternIterator Pattern
	Mediator PatternMemento Pattern
	Observer PatternState Pattern
	Strategy PatternTemplate Pattern

    ==============  JEE or J2EE Design Patterns  =============

1. Presentation Layer Design Pattern

	Intercepting Filter Pattern
	Front Controller Pattern
	View Helper Pattern
	Composite View Pattern

2. Business Layer Design Pattern

	Business Delegate Pattern
	Service Locator Pattern
	Session Facade Pattern
	Transfer Object Pattern

3. Integration Layer Design Pattern

	Data Access Object Pattern
	Web Service Broker Pattern
